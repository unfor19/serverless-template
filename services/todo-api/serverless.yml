# if it's left-most, then it's a reserved keyword, e.g service, package, etc.

service: serverless-template-todo-api # stack name in cfn
package:
  individually: true # selecting artifacts manually - zip files

plugins:
  - serverless-pseudo-parameters # use #{AWS::AccountId}, #{AWS::Region}, etc.
  - serverless-latest-layer-version # when defined with "latest", gets the latest layer version

frameworkVersion: ">=1.1.0 <2.0.0"

# manage your values here, no reserved keywords here
custom:
  common_mappings: ${file(../../serverless.common.yml):custom} # importing common values
  todos_bucket_name: # the "database"
    "Fn::ImportValue": "${self:custom.common_mappings.appname}-todos-${self:provider.stage}"

# everything under provider, is a reserved keyword, e.g environment, layers, etc.
provider:
  name: aws
  runtime: ${self:custom.common_mappings.runtime.${self:provider.stage}} # nodejs, python, etc.
  stage: ${opt:stage} # supplied with: yarn deploy:dev (sls deploy --stage=dev)
  region: ${self:custom.common_mappings.region.${self:provider.stage}}
  memorySize: ${self:custom.common_mappings.memory_size.${self:provider.stage}}
  environment: # env vars that will be available in the functions
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    TODOS_BUCKET_NAME: ${self:custom.todos_bucket_name}

  # this is the default role for each function, it allows logging only
  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource:
        - "Fn::Join":
            - ":"
            - - "arn:aws:logs"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "log-group:/aws/lambda/*:*:*"
  # the apigw that we previously created in aws-resources
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.common_mappings.appname}-ApiGatewayRestApiId-${self:provider.stage}
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.common_mappings.appname}-ApiGatewayRestApiRootResourceId-${self:provider.stage}

  # this means ALL functions will use these layers
  layers:
    - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:Todo${self:provider.stage}:latest

# finally define your functions here
functions:
  status:
    handler: index.status
    package:
      artifact: ./dist/dist_todo.zip
    events:
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/status
          method: get

  create:
    handler: index.createItem # index.ts imports status from status.ts and exports status function
    role: todoCreateRole # a specific role which allows creating S3 objects
    package:
      artifact: ./dist/dist_todo.zip # the package where the index.js is
    layers: # in case you need a specific layer, it's an array of layers ARNs
      - arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:layer:Todo${self:provider.stage}:latest
    events: # when to trigger this function? in this case, only with an http event
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/create
          method: post

  get:
    handler: index.getItem
    role: todoGetRole
    package:
      artifact: ./dist/dist_todo.zip
    events:
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/get/{id}
          method: get

  delete:
    handler: index.deleteItem
    role: todoDeleteRole
    package:
      artifact: ./dist/dist_todo.zip
    events:
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/delete/{id}
          method: delete

  list:
    handler: index.listItems
    role: todoListRole
    package:
      artifact: ./dist/dist_todo.zip
    events:
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/list
          method: get

  update:
    handler: index.updateItem
    role: todoUpdateRole
    package:
      artifact: ./dist/dist_todo.zip
    events:
      - http:
          private: ${self:custom.common_mappings.require_api_key.${self:provider.stage}}
          path: todo/update
          method: post

# all of your CloudFormation stuff goes under resources, including Resources, Outputs, Conditions, etc.
resources:
  Resources:
    # i've created a role per function, so we have the exact permission per function
    todoCreateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:PutObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todos_bucket_name}
                          - "*"

    todoUpdateRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todos_bucket_name}
                          - "*"

    todoGetRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:GetObject*
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todos_bucket_name}
                          - "*"

    todoDeleteRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:DeleteObject
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todos_bucket_name}
                          - "*"

    todoListRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - "Fn::Join":
                        - ""
                        - - "arn:aws:s3:::"
                          - ${self:custom.todos_bucket_name}
                          - "*"
